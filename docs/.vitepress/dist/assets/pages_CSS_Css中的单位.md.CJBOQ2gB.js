import{_ as i,E as s,c as n,m as e,a,J as l,w as o,a2 as r,o as _}from"./chunks/framework.Q_H8FdZy.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pages/CSS/Css中的单位.md","filePath":"pages/CSS/Css中的单位.md"}'),h={name:"pages/CSS/Css中的单位.md"},d=r('<h2 id="css中的单位" tabindex="-1">CSS中的单位 <a class="header-anchor" href="#css中的单位" aria-label="Permalink to &quot;CSS中的单位&quot;">​</a></h2><p>CSS中的单位有很多种，下面介绍一些常用的单位。</p><h3 id="_1-px" tabindex="-1">1. px <a class="header-anchor" href="#_1-px" aria-label="Permalink to &quot;1. px&quot;">​</a></h3><ul><li>px就是pixel的缩写，意为像素。</li></ul><h3 id="_2-em" tabindex="-1">2. em <a class="header-anchor" href="#_2-em" aria-label="Permalink to &quot;2. em&quot;">​</a></h3>',5),c=e("h3",{id:"_3-rem",tabindex:"-1"},[a("3. rem "),e("a",{class:"header-anchor",href:"#_3-rem","aria-label":'Permalink to "3. rem"'},"​")],-1),m=r('<h3 id="_4" tabindex="-1">4. % <a class="header-anchor" href="#_4" aria-label="Permalink to &quot;4. %&quot;">​</a></h3><ul><li>一般宽泛的讲是相对于父元素，但是并不是十分准确。</li></ul><p>​ 1、对于普通定位元素就是我们理解的父元素</p><p>​ 2、对于position: absolute;的元素是相对于已定位的父元素</p><p>​ 3、对于position: fixed;的元素是相对于ViewPort（可视窗口)</p><p>​ 4、使用transform:translate()时，百分号指的是元素自身的大小</p><p>​ 5、margin时是相对于父元素的宽度计算的</p><h3 id="_5-vw" tabindex="-1">5. vw <a class="header-anchor" href="#_5-vw" aria-label="Permalink to &quot;5. vw&quot;">​</a></h3><ul><li>1vw等于视口宽度的1%。</li></ul><h3 id="_6-vh" tabindex="-1">6.vh <a class="header-anchor" href="#_6-vh" aria-label="Permalink to &quot;6.vh&quot;">​</a></h3><ul><li>1vh等于视口高度的1%。</li></ul><h3 id="_7-vmin" tabindex="-1">7.vmin <a class="header-anchor" href="#_7-vmin" aria-label="Permalink to &quot;7.vmin&quot;">​</a></h3><ul><li>选取 vw 和 vh 中最小的那个</li></ul><h3 id="_8-vmax" tabindex="-1">8.vmax <a class="header-anchor" href="#_8-vmax" aria-label="Permalink to &quot;8.vmax&quot;">​</a></h3><ul><li>选取 vw 和 vh 中最大的那个</li></ul>',15);function u(p,f,x,v,S,b){const t=s("font");return _(),n("div",null,[d,e("ul",null,[e("li",null,[a("参考物是"),l(t,{color:"red"},{default:o(()=>[a("父元素")]),_:1}),a("的font-size，具有继承的特点。如果自身定义了font-size按自身来计算（浏览器默认字体是16px），整个页面内1em不是一个固定的值。")])]),c,e("ul",null,[e("li",null,[a("相对于"),l(t,{color:"red"},{default:o(()=>[a("根元素html（网页）的font-size")]),_:1}),a("，不会像em那样，依赖于父元素的字体大小，而造成混乱。")])]),m])}const P=i(h,[["render",u]]);export{C as __pageData,P as default};
